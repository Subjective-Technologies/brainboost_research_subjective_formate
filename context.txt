
===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_app/FormateApp.py'
File Content:
```py
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import QCoreApplication

import sys

from com_formate_glass.FormateTransparentGlass import FormateTransparentGlass
from com_formate_logs.FormateLogger import FormateLogger
from com_formate_computervision.FormateScreenReaderMss import FormateScreenReaderMss


class FormateApp:
    

    glass = None

    def __init__(self):


        App = QApplication(sys.argv)
        
        # Adding an icon
        self.icon = QIcon("formate.png")

        # Adding item on the menu bar
        self.tray = QSystemTrayIcon()
        self.tray.setIcon(self.icon)
        self.tray.setVisible(True)

        # Creating the options
        self.menu = QMenu()
        self.settings_menu_item = QAction("ForMate Settings...")
        self.settings_menu_item.triggered.connect(self.settings_dialog)
        self. menu.addAction(self.settings_menu_item)

        # To quit the app
        self.quit = QAction("Quit")
        self.quit.triggered.connect(App.quit)
        self.menu.addAction(self.quit)

        # Adding options to the System Tray
        self.tray.setContextMenu(self.menu)

        # create the instance of our Glass implemented using a Qt transparent window
        
        self.transparent_glass = FormateTransparentGlass()
        

        # start the app
        sys.exit(App.exec())

    def settings_dialog(self):
        FormateLogger.log(FormateLogEntry(thread_name="FormateApp.py",description="Settings Dialog Selected"))    



```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_app/FormateApp.py'
File Content:
```py
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import QCoreApplication

import sys

from com_formate_glass.FormateTransparentGlass import FormateTransparentGlass
from com_formate_logs.FormateLogger import FormateLogger
from com_formate_computervision.FormateScreenReaderMss import FormateScreenReaderMss


class FormateApp:
    

    glass = None

    def __init__(self):


        App = QApplication(sys.argv)
        
        # Adding an icon
        self.icon = QIcon("formate.png")

        # Adding item on the menu bar
        self.tray = QSystemTrayIcon()
        self.tray.setIcon(self.icon)
        self.tray.setVisible(True)

        # Creating the options
        self.menu = QMenu()
        self.settings_menu_item = QAction("ForMate Settings...")
        self.settings_menu_item.triggered.connect(self.settings_dialog)
        self. menu.addAction(self.settings_menu_item)

        # To quit the app
        self.quit = QAction("Quit")
        self.quit.triggered.connect(App.quit)
        self.menu.addAction(self.quit)

        # Adding options to the System Tray
        self.tray.setContextMenu(self.menu)

        # create the instance of our Glass implemented using a Qt transparent window
        
        self.transparent_glass = FormateTransparentGlass()
        

        # start the app
        sys.exit(App.exec())

    def settings_dialog(self):
        FormateLogger.log(FormateLogEntry(thread_name="FormateApp.py",description="Settings Dialog Selected"))    



```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
Directory Path: 'com_formate_form'
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form/FormateCheckboxField.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

from com.formate.form.FormateField import FormateField

class FormateCheckboxField(FormateField):
	pass

```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form/FormateField.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

class FormateField:
	def __init__(self):
		self.appereance = None
		self.key = None
		self.value = None


```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form/FormateListBoxField.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

from com.formate.form.FormateField import FormateField

class FormateListBoxField(FormateField):
	pass

```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form/FormatePasswordField.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

from com.formate.form.FormateField import FormateField

class FormatePasswordField(FormateField):
	pass

```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form/FormateRadioButtonField.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

from com.formate.form.FormateField import FormateField

class FormateRadioButtonField(FormateField):
	pass

```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form/FormateSubmitButton.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

from com.formate.form.FormateField import FormateField

class FormateSubmitButton(FormateField):
	pass

```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form/FormateTextAreaField.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

from com.formate.form.FormateField import FormateField

class FormateTextAreaField(FormateField):
	pass

```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form/FormateTextField.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

from com.formate.form.FormateField import FormateField

class FormateTextField(FormateField):
	pass

```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
Directory Path: 'com_formate_form_autofill'
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form_autofill/FormateAutofiller.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

class FormateAutofiller:
	def __init__(self):
		pass

	def fill(self, forkey, context):
		pass

	def learn(self, forkey, value, context):
		pass


```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
Directory Path: 'com_formate_form'
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form/FormateCheckboxField.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

from com.formate.form.FormateField import FormateField

class FormateCheckboxField(FormateField):
	pass

```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form/FormateField.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

class FormateField:
	def __init__(self):
		self.appereance = None
		self.key = None
		self.value = None


```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form/FormateListBoxField.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

from com.formate.form.FormateField import FormateField

class FormateListBoxField(FormateField):
	pass

```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form/FormatePasswordField.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

from com.formate.form.FormateField import FormateField

class FormatePasswordField(FormateField):
	pass

```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form/FormateRadioButtonField.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

from com.formate.form.FormateField import FormateField

class FormateRadioButtonField(FormateField):
	pass

```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form/FormateSubmitButton.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

from com.formate.form.FormateField import FormateField

class FormateSubmitButton(FormateField):
	pass

```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form/FormateTextAreaField.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

from com.formate.form.FormateField import FormateField

class FormateTextAreaField(FormateField):
	pass

```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form/FormateTextField.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

from com.formate.form.FormateField import FormateField

class FormateTextField(FormateField):
	pass

```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
Directory Path: 'com_formate_form_autofill'
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_form_autofill/FormateAutofiller.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

class FormateAutofiller:
	def __init__(self):
		pass

	def fill(self, forkey, context):
		pass

	def learn(self, forkey, value, context):
		pass


```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
Directory Path: 'com_formate_glass'
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_glass/Command.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

class Command:
	pass

```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_glass/FormateButton.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-
import random

from PyQt5.QtWidgets import QPushButton


class FormateButton:
	def __init__(self,parent):
		self.name = None
		self.parent = parent
		self.rect = None

	def __init__(self, formate_rect, parent, color=None):
		self.name = formate_rect.text
		self.parent = parent
		self.rect = formate_rect
		self.qt_button = QPushButton(self.name, parent)
		if color is None:
			r = lambda: random.randint(0, 255)
			self.qt_button.setStyleSheet("background-color: rgb(" + (str(r()) + "," + str(r()) + "," + str(r())) + ");")
		else:
			self.qt_button.setStyleSheet("background-color: rgb(" + color[0] + "," + color[1] + "," + color[2] + ");")
		font = self.qt_button.font()
		font.setPointSize(int((int(formate_rect.h) - int(formate_rect.y))/2)-4)
		self.qt_button.setFont(font)
		self.qt_button.move(int(formate_rect.x/2), int(formate_rect.y/2))
		self.qt_button.resize(int(int((formate_rect.w) - int(formate_rect.x))/2), int((int(formate_rect.h) - int(formate_rect.y))/2))
		self.qt_button.clicked.connect(self.clickButtonMethod)
		self.qt_button.show()

	def set_coordinates_width_and_height(self, formate_rect):
		self.qt_button.move(int(formate_rect.x/2), int(formate_rect.y/2))
		self.qt_button.resize(int(int((formate_rect.w) - int(formate_rect.x))/2), int((int(formate_rect.h) - int(formate_rect.y))/2))

	def get_coordinates(self):
		return self.rect


	def clickButtonMethod(self):
		print("clicked button")

	def highlight(self, ):
		pass


```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_glass/FormateButtonGroup.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

class FormateButtonGroup:
	def __init__(self):
		self.regex = None
		self.buttons = []
		self.notification = None

	def highlight(self, ):
		pass


```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_glass/FormateNotification.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-

class FormateNotification:
	def __init__(self):
		self.message = None
		self.picture = None

	def popup(self, ):
		pass


```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_glass/FormateRect.py'
File Content:
```py
#!/usr/bin/python3
#-*- coding: utf-8 -*-


class FormateRect:
    
    
    
    def __init__(self):
        self.x = "0"
        self.y = "0"
        self.w = "0"
        self.h = "0"
        self.text = "None"
        self.im = "None"
        self.path="None"

    def __init__(self, x="0", y="0", w="0", h="0", t="None", im=None,path_if_persisted="None"):
        self.x = x
        self.y = y
        self.w = w
        self.h = h
        self.text = t
        self.im = im
        self.path = path_if_persisted
        if (self.path=="None"):
            self.path = "None"
        else:
            self.path = path_if_persisted
        
    
    def is_inside_another(self,formate_rect):
        return (self.x >= formate_rect.x and
                self.y >= formate_rect.y and
                (self.w <= (formate_rect.w - self.x)) and
                (self.h <= (formate_rect.h - self.y)))
    
    def is_equal_to(self,another_rect):
        return (self.x == another_rect.x and
                self.y == another_rect.y and
                self.w == another_rect.w and
                self.h == another_rect.h)
    
    def im_html_tag_from_image_url(self,url):
        full_url = "/images/" + str(url)
        return "<a href=\"" + str(full_url) + "\"><img src=\"" + str(full_url) + "\" width=\"400px\"></a>"
    
    def __str__(self):
        if (self.im!=None):
            return self.im_html_tag_from_image_url(self.path) + "," + str(self.text) + "," + str(self.x) + "," + str(self.y) + "," + str(self.w) + "," + str(self.h)
        else:
            return "None," + str(self.text) + "," + str(self.x) + "," + str(self.y) + "," + str(self.w) + "," + str(self.h)
            

   # def to_str(self):
   #     if (self.path!=""):
   #         link = "file:///Users/goldenthinker/Projects/formate-spyder/" + self.path
   #     else:
   #         link = "nolink"
   #     print(link)
   #     return "[" + str(self.text) + "_" + str(self.x) + "_" + str(self.y) + "_" + str(self.w) + "_" + str(self.h) + "]"
```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_glass/FormateRendererOnGlass.py'
File Content:
```py
import time
from datetime import datetime

from PyQt5.QtCore import QThread, pyqtSignal

from com_formate_glass.FormateRect import FormateRect
import pytesseract


from com_formate_logs.FormateLogger import FormateLogger
from com_formate_logs.FormateLogEntry import FormateLogEntry


class FormateRendererOnGlass(QThread):
    render_button_signal = pyqtSignal(FormateRect)

    def __init__(self, glass,boxes):
        super().__init__()
        self.glass = glass
        self.boxes = boxes




    def get_text_at_position(self, roi):
        start = time.time()
        text = pytesseract.image_to_string(roi, config='-l eng --oem 1 --psm 7')
        end = time.time()
        FormateLogger.log(FormateLogEntry(thread_name="FormateRendererOnGlass.py",description="Decode text from rect",rect_involved=FormateRect(text=FormateLogger.normalize_text(text)),processing_time=str(end - start)))   
        return text

    def run(self):
        FormateLogger.log(FormateLogEntry(thread_name="FormateTransparentGlass.py",description="is running"))    


```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_glass/FormateTransparentGlass.py'
File Content:
```py
#!/usr/bin/python3
# -*- coding: utf-8 -*-
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import pyqtSlot, QThread
from PyQt5.QtWidgets import QMainWindow, QPushButton, QApplication

from com_formate_computervision.FormateRenderScheduler import FormateRenderScheduler
from com_formate_computervision.FormateScreenReaderMss import FormateScreenReaderMss
from com_formate_render.FormateScreenshot import FormateScreenshot

from com_formate_computervision.FormateTesseract import FormateTesseract
from com_formate_glass.FormateButton import FormateButton
from com_formate_glass.FormateRect import FormateRect
from com_formate_glass.FormateRendererOnGlass import FormateRendererOnGlass
from datetime import datetime
from com_formate_logs.FormateLogger import FormateLogger
from com_formate_logs.FormateLogEntry import FormateLogEntry
from com_formate_workerthreads.WorkerThreads import WorkerThreads



class FormateTransparentGlass(QMainWindow):


    def __init__(self):
        super().__init__()
        

        # setting  the geometry of window

        allScreens = QApplication.desktop().geometry()

        self.setGeometry(allScreens)
        # print("MAIN THREAD: Screen Size is: " + str(allScreens))

        self.buttons = []
        self.root_screenshot = None

        # Implement transparency

 
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground, True)


        self.setWindowFlags(
            QtCore.Qt.WindowStaysOnTopHint |
            QtCore.Qt.FramelessWindowHint |
            QtCore.Qt.X11BypassWindowManagerHint
        )

        # Initialize screen reader that takes screenshots only in screen pixels changing areas
        
        self.input = FormateScreenReaderMss(glass=self)
        self.input.changedPixels.connect(self.new_image_detected_through_the_glass)
        WorkerThreads.add_thread(name="screenreader",my_thread=self.input)
        self.input.start()
        
        
        
        
        # Show the transparent glass

        self.show()

   
    def paintEvent(self, event):
        FormateLogger.log(FormateLogEntry(thread_name="FormateTransparentGlass.py",description="Refresh"))

    def settings_dialog(self):
        FormateLogger.log(FormateLogEntry(thread_name="FormateTransparentGlass.py",description="Settings clicked"))
        
        
    def has_root_screenshot(self):
        return self.root_screenshot != None
    
    def has_not_a_root_screenshot(self):
        return self.root_screenshot == None
        
    
    
    # Each screenshot is a thread that is started from the main application GUI
    # that is this transparent glass
    @QtCore.pyqtSlot(FormateScreenshot)
    def new_image_detected_through_the_glass(self,screenshot):
        if self.has_not_a_root_screenshot():
            self.root_screenshot = screenshot
        else:
            self.root_screenshot.insert_screenshot(screenshot)
        screenshot.glass_render_this_newly_detected_element.connect(self.render_button_from_screenshot)
        screenshot.glass_remove_elements_as_picture_from_this_screenshot_changed.connect(self.remove_elements_from_glass)
        screenshot.start()
        FormateLogger.log(FormateLogEntry(thread_name="FormateTransparentGlass.py",description="new screenshot starting thread"))    

        
    @QtCore.pyqtSlot(FormateRect)
    def render_button_from_screenshot(self,formate_rect):
        FormateLogger.log(FormateLogEntry(thread_name="FormateTransparentGlass.py",description="Render button from screenshot"))    
        FormateButton(formate_rect,self)
        
        
    @QtCore.pyqtSlot(str)
    def remove_elements_from_glass(self,elements_to_remove):
        pass
    
    
    @QtCore.pyqtSlot(FormateRect)
    def render_formate_hook_from_screenshot(self,formate_rect):
        pass
    

    
    @QtCore.pyqtSlot(FormateScreenshot)
    def render_button(self):
        pass

```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_logs/FormateLogBrowser.py'
File Content:
```py
# -*- coding: utf-8 -*-
import tablib
import cherrypy
import datetime
import os
import os.path
import CherrypyMako


CherrypyMako.setup()
root_dir = os.path.abspath( os.path.dirname(__file__))

class FormateLogBrowser(object):
    
    def __init__(self):
        self.data = tablib.Dataset()
        now = datetime.datetime.now()
        current_date = now.strftime("%Y_%m_%d")
        logfile_csv = "logs/formate_log-" + current_date + ".csv"
        #logfile_csv = "logs/formate_log-" + "2021_03_28" + ".csv"
        with open(logfile_csv, "r") as log_file:
            self.imported_data = self.data.load(log_file, format="csv")
        self.imported_data.headers=['TimeStamp', 'ThreadName', 'Description','Image','Text','x','y','w','h','Image_1','Text_1','x_1','y_1','w_1','h_1','Time']

    
    @cherrypy.expose
    @cherrypy.tools.mako(filename='log_browser.html')
    def index(self):
        return {'logTable':(str(self.imported_data.export("html")))}
    
    

cherrypy.config.update({'server.socket_host': '0.0.0.0',
                         'server.socket_port'  : 80,
                         'tools.mako.directories' : [os.path.join(root_dir,'browser')]})



cherrypy.quickstart(FormateLogBrowser(),'/','FormateLogBrowser.config')

```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
Directory Path: 'com_formate_workerthreads'
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'com_formate_workerthreads/WorkerThreads.py'
File Content:
```py
# -*- coding: utf-8 -*-

class WorkerThreads:
    
    give_me_thread = dict()
    
    @classmethod
    def get_thread(cls,name):
        return WorkerThreads.give_me_thread.get(name)
    
    @classmethod
    def add_thread(cls,name=None,my_thread=None):
        WorkerThreads.give_me_thread[name] = my_thread

    
```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'tests/thread_example.py'
File Content:
```py
from PyQt5 import QtGui
from PyQt5.QtWidgets import QApplication, QDialog, QProgressBar, QPushButton, QVBoxLayout
import sys
from PyQt5.QtCore import Qt, QThread, pyqtSignal
import time
 
 
class MyThread(QThread):
    # Create a counter thread
    change_value = pyqtSignal(int)
    def run(self):
        cnt = 0
        while cnt < 100:
            cnt+=1
            time.sleep(0.3)
            self.change_value.emit(cnt)
class Window(QDialog):
    def __init__(self):
        super().__init__()
        self.title = "PyQt5 ProgressBar"
        self.top = 200
        self.left = 500
        self.width = 300
        self.height = 100
        self.setWindowIcon(QtGui.QIcon("icon.png"))
        self.setWindowTitle(self.title)
        self.setGeometry(self.left, self.top, self.width, self.height)
        vbox = QVBoxLayout()
        self.progressbar = QProgressBar()
        #self.progressbar.setOrientation(Qt.Vertical)
        self.progressbar.setMaximum(100)
        self.progressbar.setStyleSheet("QProgressBar {border: 2px solid grey;border-radius:8px;padding:1px}"
                                       "QProgressBar::chunk {background:yellow}")
        #qlineargradient(x1: 0, y1: 0.5, x2: 1, y2: 0.5, stop: 0 red, stop: 1 white);
        #self.progressbar.setStyleSheet("QProgressBar::chunk {background: qlineargradient(x1: 0, y1: 0.5, x2: 1, y2: 0.5, stop: 0 red, stop: 1 white); }")
        #self.progressbar.setTextVisible(False)
        vbox.addWidget(self.progressbar)
        self.button = QPushButton("Start Progressbar")
        self.button.clicked.connect(self.startProgressBar)
        self.button.setStyleSheet('background-color:yellow')
        vbox.addWidget(self.button)
        self.setLayout(vbox)
        self.show()
 
    def startProgressBar(self):
        self.thread = MyThread()
        self.thread.change_value.connect(self.setProgressVal)
        self.thread.start()
 
    def setProgressVal(self, val):
        self.progressbar.setValue(val)
 
 
 
App = QApplication(sys.argv)
window = Window()
sys.exit(App.exec())
```
===============================

===============================
Project Name: 'brainboost_research_subjective_formate'
File Path: 'ar_monitor_change_detector.py'
File Content:
```py
from PIL import ImageChops  # $ pip install pillow
from pyscreenshot import grab  # $ pip install pyscreenshot
import time
from ar_text_shooter import ARTextShooter


class ARMonitorChangeDetector():
    def detect_pixel_changes(self):
        im = grab()
        while True:  # http://effbot.org/zone/pil-comparing-images.htm
            time.sleep(1)
            diff = ImageChops.difference(grab(), im)
            bbox = diff.getbbox()
            if bbox is not None:  # exact comparison
                break
        return [diff.crop(bbox), bbox]

    def monitor_screen(self, window):
        ar_text_shooter = ARTextShooter()
        while True:
            changed_area = self.detect_pixel_changes()
            print("Area Changed: "+str(changed_area))
            start = time.time()
            content_to_buttonize = ar_text_shooter.shoot(changed_area[0], changed_area[1])
            end = time.time()
            print("Time OCR: "+str(end - start))
            if len(content_to_buttonize)>1:
                print("Detected text: "+content_to_buttonize)
                window.buttonize(content_to_buttonize)
            else:
                print("No text detected")


```
===============================
